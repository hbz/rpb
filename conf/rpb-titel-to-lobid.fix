# Remove empty fields

vacuum()

# ------- Set JSON-LD context -------

set_field("@context","http://lobid.org/resources/context.jsonld")

# ------- Set internal _id -------

copy_field("f00_", "_id")

# ------- Set "type" -------

set_array("type[]", "BibliographicResource")
if all_equal("f36_", "u")
  set_field("type[].$append", "Article")
end
if all_equal("f36_", "s")
  set_field("type[].$append", "Book")
end
if any_equal("f36_", "sm")
  if exists("f36t")
    copy_field("f36t", "type[].$append")
  else
    set_field("type[].$append", "Periodical")
  end
end
if any_equal("f36_", "sbd")
  set_field("type[].$append", "Book")
  set_array("isPartOf[]")
  set_array("isPartOf[].$append.type[]", "IsPartOfRelation")
  set_array("isPartOf[].$last.hasSuperordinate[]")
  # Set up superordinate ID: use the volume ID, remove the numbering part:
  copy_field("_id", "isPartOf[].$last.hasSuperordinate[].$append.id")
  prepend("isPartOf[].$last.hasSuperordinate[].$last.id","https://lobid.org/resources/RPB")
  replace_all("isPartOf[].$last.hasSuperordinate[].$last.id","b\\d+","")
  # Set up superordinate label, output by decoder as f20ü
  copy_field("f20ü", "isPartOf[].$last.hasSuperordinate[].$last.label")
  # Take volume numbering from `f01_`
  copy_field("f01_", "isPartOf[].$last.numbering")
end

# ------- rpbId -------

copy_field("_id", "rpbId")
prepend("rpbId","RPB") 

# ------- "id", using https URIs -------

copy_field("rpbId", "id")
prepend("id","https://lobid.org/resources/") 

# ------- hbzId -------
# Remove titles that are already in lobid-resources
#
# if exists ("f983")
#    reject()
# end

copy_field("f983", "hbzId")

# ------- biblioVinoId -------

copy_field("f84_", "biblioVinoId")
replace_all("biblioVinoId", "\\.", "")

# ------- "inCollection" -------

set_hash("coll")
set_field("coll.id", "http://lobid.org/resources/HT013494180#!")
set_array("coll.type[]")
add_field("coll.type[].$append", "Collection")
add_field("coll.label", "Rheinland-Pfälzische Bibliographie")
set_array("inCollection[]")
move_field("coll", "inCollection[]")

# ------- "title" field -------

if any_equal("f36_", "sbd")
  paste("title", "f20ü", "f01_", "f20_", "join_char": " | ")
else
  copy_field("f20_", "title")
end

# Mit Folgendem warten, bis RPB-28 erledigt ist:
# replace_all("title","¬","")
# replace_all("title", "\\s\\+", "")

# ------- "extent" -------

move_field("f77_", "extent")

# ------- "note" -------

set_array("note[]")
do list(path:"f81?", "var": "$i")
  copy_field("$i", "note[].$append")
end
uniq("note[]")

# ------- "medium" -------
# Dafür scheint es keine explizite Angabe zu geben.


# -------- "responsibilityStatement" --------
# f39_ ist nach Quelldatendoku die "Verfasserangabe (Vorlageform)"

set_array("responsibilityStatement")
move_field("f39_", "responsibilityStatement[]")

# ------- "language" -------
# Dafür scheint es keine explizite Angabe zu geben.

# ------- "publication" object -------

set_hash("pub")
set_array("pub.location[]")
copy_field("f74_", "pub.location[].$append")
if all_match("f76a", "\\d{4}")
  copy_field("f76a", "pub.startDate")
end

# Folgendes rausgenommen wegen 929t130101, in dem sich f76a wiederholt
# replace_all("pub.startDate","^\\[(\\d{4})\\]","$1")
set_array("pub.publishedBy[]")
copy_field("f75_", "pub.publishedBy[].$append")
set_array("pub.type[]")
add_field("pub.type[].$append", "PublicationEvent")
set_array("publication[]")
move_field("pub", "publication[]")

# ------- "zdbId" -------

if any_equal("f36_", "sm")
  move_field("f88_", "zdbId")
end

# -------RPB-Sachnotationen --------

set_array("subject[]")

if exists ("f30*")
  move_field("f30*", "subject[].$append.id")
  replace_all("subject[].*.id","_s(n\\d+)_","http://purl.org/lobid/rpb#$1")
  uniq("subject[]")
  do list(path: "subject[]")
    add_field("label", "Platzhalter Schlagwortlabel")
    set_array("type[]")
    add_field("type[].$append", "Concept")
    add_field("source.id", "http://purl.org/lobid/rpb")
    add_field("source.label", "Systematik der Rheinland-Pfälzischen Bibliographie")
  end
end

# ------- Ortsnotation -------

# In den Testdaten sind die Werte in "f31_" und "f31a" identisch und ergeben eine Dublette. Der Grund ist, dass sie kombiniert mit "f30" und "f31a" eine Schlagwortfolge ergeben. Beim Treffen am 14.6.2022 wurde – wenn AP sich richtig erinnert – beschlossen, diese Ketten aufzuspalten in `spatial`- und `subject` -Einräge (analog zur NWbib).
# Einige Ortsschlagwörter in "f31_" stammen aus der GND, werden aber nicht nach "subject" verschoben, sondern bleiben in `spatial`, siehe https://jira.hbz-nrw.de/browse/RPB-14?focusedCommentId=287089#comment-287089
# To Do: 
# 1. Sich wiederholende Werte werden momentan doppelt im JSON abgelegt, siehe test-output-27.json
# 2. Lookup der RPB-Raumsystematik-Labels

set_array("spatial[]")

do list (path:"f31?", "var": "$i")
  copy_field("$i", "spatial[].$append.id")
end

uniq("spatial[]")

do list (path:"spatial[]", "var": "$i")
  copy_field("$i.id", "$i.label")
  replace_all("$i.label","^_r\\d{2}_\\s_(.*?)_$","$1")
  if any_match("$i.id", "^_r\\d{2}_\\s_(\\d*)n(\\d)_$")
    replace_all("$i.id","^_r\\d{2}_\\s_(\\d*)n(\\d)_$","https://d-nb.info/gnd/$1-$2")
    lookup("$i.label", "./RPB-Export_HBZ_SW.tsv","sep_char":"\t")
    set_array("$i.type[]","PlaceOrGeographicName")
    add_field("$i.source.id", "https://d-nb.info/gnd/7749153-1")
    add_field("$i.source.label", "Gemeinsame Normdatei (GND)")
  elsif any_contain("$i.id", "_r99_")
    replace_all("$i.id","^_r99_\\s_o(\\d+)_$","https://rpb.lobid.org/spatial#n$1")
    set_array("$i.type[]","Concept")
    add_field("$i.source.id", "https://rpb.lobid.org/spatial")
    add_field("$i.source.label", "RPB-Raumsystematik")
  else
    replace_all("$i.id","^_r(\\d{2})_$","https://rpb.lobid.org/spatial#n$1")
    set_array("$i.type[]","Concept")
    add_field("$i.source.id", "https://rpb.lobid.org/spatial")
    add_field("$i.source.label", "RPB-Raumsystematik")
  end
end

# ------- GND-Schlagwörter -------
# To Do:
# 1. Schlagwortketten stehen getrennt mit Semikola in einem Feld, z.B.
# f32_ _4252261n4_ ; _4053474n1_ ; _00Sn09k3368351a_
# 2. Eine Schlagworfolge kann sowohl Nicht-GND als auch GND-Werte enthalten
# 3. Jede Schlagwortfolge muss in als Objekt im "subject"-Array mit
# "componentList" landen. Der Source-Wert jeweils an die Quelle angepasst.
# To Do: Die Transformation behandelt bisher GND-Ids (hier und in `spatial`) so, als würden sie allesamt einen Bindestrich enthalten, was ja nicht der Fall ist.

set_array("@subject[]")

do list (path:"f32?", "var": "$i")
  copy_field("$i", "@subject[].$append.@swf[]")
end

do list (path:"@subject[]", "var": "$i")
  set_array("subject[].$append.type[]","ComplexSubject")
  set_array("subject[].$last.label") # Muss Array sein, damit Labels in einem zweiten Schritt zusammengeführt werden können.
  set_array("subject[].$last.componentList[]")
  split_field("$i.@swf[]", " ; ")
  copy_field("$i.@swf[]", "subject[].$last.componentList[].$append.id")
end

do list (path:"subject[].*.componentList[]", "var": "$i")
  replace_all("$i.id","_(.*)_","$1")
  copy_field("$i.id", "$i.label")
  lookup("$i.label", "./RPB-Export_HBZ_SW.tsv","sep_char":"\t")
  if all_match("$i.id","^00.*|^036n.*|^107n.*|^121n.*|^929n.*|z.*")
    prepend("$i.id", "https://rpb.lobid.org/sw/")
    add_field("$i.source.id", "http://rpb.lobid.org/sw")
    add_field("$i.source.label", "RPB-Sachsystematik")
  else
    replace_all("$i.id", "(^\\d*)n(\\d)", "$1-$2")
    prepend("$i.id", "https://d-nb.info/gnd/")
    add_field("$i.source.id", "https://d-nb.info/gnd/7749153-1")
    add_field("$i.source.label", "Gemeinsame Normdatei (GND)")
  end
end

# Generierung des pipe-separaierten Labels für eine gesamte Schlagwortfolge ("subject.label").

do list (path:"subject[]", "var": "$i")
  copy_field("$i.*.componentList[].label", "$i.label.$append")
  join_field("$i.label"," | ")
end

# ------- Contribution -------

set_array("contribution[]")
copy_field("f40[].*.f40_", "contribution[].$append.agent.id")
copy_field("f60[].*.f60_", "contribution[].$append.agent.id")

do list(path: "contribution[]")
  replace_all("agent.id","_(.*)_","$1")
  copy_field("agent.id", "agent.label")
  lookup("agent.label", "./RPB-Export_HBZ_SW.tsv","sep_char":"\t")
  if all_match("agent.id","^00.*|^107n.*|^929n.*")
    prepend("agent.id", "https://rpb.lobid.org/agent/")
  else
    replace_all("agent.id", "(^\\d*)n(\\d)", "$1-$2")
    prepend("agent.id", "https://d-nb.info/gnd/")
  end
  add_field("role.id", "http://id.loc.gov/vocabulary/relators/aut")
  add_field("role.label", "Autor/in")
  set_array("type[]", "Contribution")
end

# ------- bibliographicCitation -------
# Siehe https://jira.hbz-nrw.de/browse/RPB-26

if exists ("f70t")
  do list(path:"f70*", "var": "$i")
    paste("bibliographicCitation", "~In: ", "f70k", "~: ", "f70t", "~. - ", "f70b", "~ (", "f70j", "~), ", "f70h", " ", "f70z", "~, Seite ", "f70s", "~. -" join_char: "")
    replace_all("bibliographicCitation", "In: : ", "In: ")
    replace_all("bibliographicCitation", ", Seite . -$", "")
    replace_all("bibliographicCitation", "  ", " ")
    replace_all("bibliographicCitation", ", , ", ", ")
  end
elsif exists ("f70_")
  paste("bibliographicCitation", "f70_")
elsif exists ("f701")
  paste("bibliographicCitation", "f701")
elsif exists ("f702")
  paste("bibliographicCitation", "f702")
elsif exists ("f703")
  paste("bibliographicCitation", "f703")
elsif exists ("f704")
  paste("bibliographicCitation", "f704")
elsif exists ("f705")
  paste("bibliographicCitation", "f705")
elsif exists ("f706")
  paste("bibliographicCitation", "f706")
elsif exists ("f707")
  paste("bibliographicCitation", "f707")
elsif exists ("f708")
  paste("bibliographicCitation", "f708")
elsif exists ("f709")
  paste("bibliographicCitation", "f709")
end
replace_all("bibliographicCitation","¬","")

retain( "type[]", "contribution[]", "extent", "hasItem[]", "responsibilityStatement[]", "language[]", "medium[]", "subject[]", "title", "hbzId", "oclcNumber[]", "otherTitleInformation[]", "natureOfContent[]", "publication[]", "sameAs[]", "describedBy", "@context", "id", "zdbId", "spatial[]", "inCollection[]", "rpbId", "biblioVinoId", "bibliographicCitation", "isPartOf[]", "note[]")

vacuum()
