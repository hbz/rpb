# Remove titles that are already in lobid-resources, currently disabled
# (see https://jira.hbz-nrw.de/browse/RPB-28, https://jira.hbz-nrw.de/browse/RPB-100)

# if exists ("f983")
#   if all_match("f36_","s|sm")
#     reject()
#   end
# end
# do once()
#   put_filemap("https://github.com/hbz/lookup-tables/raw/master/data/almaMmsId2rpbId.tsv",
#     "rpbId2almaMmsId", "key_column": "1", "value_column": "0", "sep_char": "\t")
# end
# paste("inLobid", "rpbId", "join_char": "")
# lookup("inLobid", "rpbId2almaMmsId", "delete": "true")
# if exists("inLobid")
#   reject()
# end

do put_macro("add")
  if exists("$[from]")
    set_array("_temp")
    copy_field("$[from]", "_temp.$append.$[valueField]")
    add_field("_temp.*.type", "$[type]")
    move_field("_temp.*", "$[to][].$append")
  end
end

do put_macro("add_all")
  set_array("$[to][]")
  call_macro("add", to: "$[to]", from: "$[from]", type: "", valueField: "$[valueField]")
end

do put_macro("add_url")
  if exists("$[from]")
    if all_match("$[from]", "(https?|ftp):\\/\\/(\\S+\\.)+\\S+(\\/\\S*)?|")
      move_field("$[from]", "f90[].$append.f90_")
      set_field("f90[].$last.n90", "$[type]")
    end
  end
end

do put_macro("ref_f01_unless_exists")
  unless exists("$[field]")
    add_field("$[field]", "s. Zählung in f01_")
  end
end

do put_macro("contribution_to_uri")
  do list (path:"$[field][]", "var": "$i")
    replace_all("$i.value","_(.*)_","$1")
    if all_match("$i.value","^00.*|^107n.*|^929n.*")
      prepend("$i.value", "https://rpb.lobid.org/agent/")
    elsif all_match("$i.value","^\\d.*")
      replace_all("$i.value", "(^\\d*)n(\\d)", "$1-$2")
      prepend("$i.value", "https://d-nb.info/gnd/")
    end
  end
end

do put_macro("to_bool")
  if exists("$[from]")
    move_field("$[from]","$[to]~")
    set_field("$[to]~", "true")
  end
end

move_field("f00_", "rpbId")
call_macro("to_bool", from: "f14_", to: "doNotIndex")
move_field("f18_", "inCollection")
move_field("f20_", "title")
move_field("f21_", "preferredTitle")
call_macro("add_all", from: "f24?", to: "parallelTitle", valueField: "value")
call_macro("add_all", from: "f27?", to: "alternativeTitle", valueField: "value")
move_field("f28_", "alternativeSpelling")
move_field("f70b", "volume")
move_field("f70h", "issue")
move_field("f70j", "year")
move_field("f70s", "pages")
move_field("f70z", "alternativeNumbering")
move_field("f76a", "publicationDate")
move_field("f76b", "publicationYear")
move_field("f77_", "extent")
call_macro("add_all", from: "f81?", to: "note", valueField: "value")
call_macro("add_all", from: "f85?", to: "isPartOf", valueField: "value")

call_macro("add_all", from: "f30?", to: "subject", valueField: "value") # Sachnotation
replace_all("subject[].*.value","_s(n\\d+)_","http://purl.org/lobid/rpb#$1")

call_macro("add_all", to: "spatial", from: "f31?", valueField: "value") # Ortsnotation
do list (path:"spatial[]", "var": "$i")
  if any_match("$i.value", "^_r\\d{2}_\\s_(\\d*)n(\\d)_$")
    replace_all("$i.value","^_r\\d{2}_\\s_(\\d*)n(\\d)_$","https://d-nb.info/gnd/$1-$2")
  elsif any_contain("$i.value", "_r99_")
    replace_all("$i.value","^_r99_\\s_o(\\d+)_$","https://rpb.lobid.org/spatial#n$1")
  else
    replace_all("$i.value","^_r(\\d{2})_$","https://rpb.lobid.org/spatial#n$1")
  end
end

call_macro("add_all", to: "subjectComponentList", from: "f32?", valueField: "value") # Schlagwortkette
do list (path:"subjectComponentList[]", "var": "$i")
  split_field("$i.value", " ; ")
  set_array("$i.subject[]")
  move_field("$i.value", "$i.subject[].$append.value")
end
do list (path:"subjectComponentList[].*.subject[]", "var": "$i")
  replace_all("$i.value","_(.*)_","$1")
  if all_match("$i.value","^00.*|^036n.*|^107n.*|^121n.*|^929n.*|z.*")
    prepend("$i.value", "https://rpb.lobid.org/sw/")
  else
    replace_all("$i.value", "(^\\d*)n(\\d)", "$1-$2")
    prepend("$i.value", "https://d-nb.info/gnd/")
  end
end

call_macro("add_all", to: "f70", from: "f70[_123456789]", valueField: "f70_") # Quelle

# Erscheinungsdatum (76a) und Erscheinungsjahr (76b) sind Pflicht, bei Bänden aber oft nur f01_ (Zählung) vorhanden:
if all_equal("f36_", "sbd")
  call_macro("ref_f01_unless_exists", field: "publicationDate")
  call_macro("ref_f01_unless_exists", field: "publicationYear")
end

# Erscheinungsdatum (76a) und Erscheinungsjahr (76b) sind Pflicht bei allen selbständigen Werken (Einheitsmaske):
if all_match("f36_", "s|sbd|sm")
  unless exists("publicationDate")
    add_field("publicationDate", "N/A")
  end
  unless exists("publicationYear")
    add_field("publicationYear", "N/A")
  end
end

unless exists("f39_")
  move_field("f39x", "f39_") # 39x ist nicht Teil der Planung Eingabeformulare, verschwindet sonst
  prepend("f39_", "Aus f39x: ")
end
move_field("f39_", "responsibilityStatement")

# 70 ist Pflicht für Aufsätze, ist aber häufig nicht gesetzt, nur spezifische Einzelfelder:
if all_equal("f36_", "u")
  unless exists("f70[].1")
    add_field("f70[].$append.f70_", "s. spez. Felder (volume, issue, etc.)")
  end
end

# Seitenzahl in pages ist Pflichtfeld für Artikel (f36_=u)
unless exists("pages")
 if all_equal("f36_", "u")
  if exists("f70_")
    copy_field("f70_", "pages")
    prepend("pages", "Kopiert aus f70_: ")
    put_var("pages", ".*(S(\\.|eiten?)\\s+\\d+(\\s*-\\s*\\d+)?).*")
    if all_match("f70_", "$[pages]")
      if is_string("f70_")
        replace_all("pages", "$[pages]", "Aus f70_: $1")
      end
    end
  else
    add_field("pages", "N/A")
  end
 end
end

# Menschenlesbare Werte nutzen (für die Erfassung in Strapi)
if is_array("f36_")
  # print_record("Mehrere Satztypen gefunden: ")
  set_field("f36_", "f36_.$last")
end
lookup("f36_", s: "Monografie", sm: "Mehrt. Mono (ÜO)", sbd: "Band")


# URL
set_array("f90[]")

call_macro("add_url", from: "f90e", type: "Volltext")
call_macro("add_url", from: "f90f", type: "Andere URL")
call_macro("add_url", from: "f90g", type: "Andere URL")


# Signatur
set_array("f90a[]")

if exists("f90a")
  move_field("f90a", "f90a[].$append.f90a")
  # add_field("f90a[].*.n90a", "KO") etc.
end

# Person
set_array("person[]")

call_macro("add", to: "person", from: "f40?", type: "http://id.loc.gov/vocabulary/relators/aut", valueField: "value")
call_macro("add", to: "person", from: "f41?", type: "http://id.loc.gov/vocabulary/relators/pbl", valueField: "value")
call_macro("add", to: "person", from: "f42?", type: "http://id.loc.gov/vocabulary/relators/ctb", valueField: "value")
call_macro("add", to: "person", from: "f43?", type: "http://id.loc.gov/vocabulary/relators/edt", valueField: "value")
call_macro("add", to: "person", from: "f44?", type: "http://id.loc.gov/vocabulary/relators/ccp", valueField: "value")
call_macro("add", to: "person", from: "f45?", type: "http://id.loc.gov/vocabulary/relators/col", valueField: "value")
call_macro("add", to: "person", from: "f46?", type: "http://id.loc.gov/vocabulary/relators/lbt", valueField: "value")
call_macro("add", to: "person", from: "f47?", type: "http://id.loc.gov/vocabulary/relators/trl", valueField: "value")
call_macro("add", to: "person", from: "f50?", type: "http://id.loc.gov/vocabulary/relators/ill", valueField: "value")
call_macro("add", to: "person", from: "f51?", type: "http://id.loc.gov/vocabulary/relators/wst", valueField: "value")
call_macro("add", to: "person", from: "f52?", type: "http://id.loc.gov/vocabulary/relators/cmp", valueField: "value")
call_macro("add", to: "person", from: "f56?", type: "http://id.loc.gov/vocabulary/relators/red", valueField: "value")
call_macro("add", to: "person", from: "f57?", type: "http://id.loc.gov/vocabulary/relators/oth", valueField: "value")
call_macro("add", to: "person", from: "f58?", type: "http://id.loc.gov/vocabulary/relators/act", valueField: "value")
call_macro("add", to: "person", from: "f59?", type: "http://id.loc.gov/vocabulary/relators/hnr", valueField: "value")

call_macro("contribution_to_uri", field: "person")

# Körperschaft
set_array("corporateBody[]")

call_macro("add", to: "corporateBody", from: "f60?", type: "http://id.loc.gov/vocabulary/relators/org", valueField: "value")
call_macro("add", to: "corporateBody", from: "f61?", type: "http://id.loc.gov/vocabulary/relators/isb", valueField: "value")
call_macro("add", to: "corporateBody", from: "f69?", type: "http://id.loc.gov/vocabulary/relators/hnr", valueField: "value")

call_macro("contribution_to_uri", field: "corporateBody")

if exists("inCollection")
  set_field("inCollection", "RPB und BiblioVino")
else
  if all_contain("rpbId", "w")
    set_field("inCollection", "nur BiblioVino")
  else
    set_field("inCollection", "nur RPB")
  end
end

if exists("f01_")
  set_hash("f01")
  if is_array("f01_") # Nicht wiederholbar, 1. Wert nehmen
    move_field("f01_.1", "f01_t")
    remove_field("f01_")
    move_field("f01_t", "f01_")
  end
  copy_field("f01_", "f01.f01_") # Zählung (Vorlage)
  copy_field("f01_", "f01.f01s") # Zählung (Sortierform)
  replace_all("f01.f01s", "^.*((19|20)\\d\\d).*$", "$1")
  unless all_match("f01.f01s", "\\d{4}")
    remove_field("f01.f01s")
  end
  copy_field("_id", "f01.f01u") # Verknüpfung zur MtM (ÜO)
  replace_all("f01.f01u","b\\d+","")
  prepend("f01.f01u","https://lobid.org/resources/")
end

# ISBNs (f87_, f871 ff.)
set_array("f87[]")
if exists("f87?")
  set_array("_temp")
  copy_field("f87?", "_temp.$append.f87_")
  add_field("_temp.*.n87~", "true")
  move_field("_temp.*", "f87[].$append")
end

vacuum()
